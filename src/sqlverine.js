// @generated by Peggy 4.0.0.
//
// https://peggyjs.org/

"use strict";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = ")";
  var peg$c1 = "insert into";
  var peg$c2 = "(";
  var peg$c3 = "values";
  var peg$c4 = "update";
  var peg$c5 = "set";
  var peg$c6 = ",";
  var peg$c7 = "drop table";
  var peg$c8 = "alter table";
  var peg$c9 = "drop column";
  var peg$c10 = "rename to";
  var peg$c11 = "rename";
  var peg$c12 = "to";
  var peg$c13 = "add column";
  var peg$c14 = "delete from";
  var peg$c15 = "create table";
  var peg$c16 = "foreign key";
  var peg$c17 = "references";
  var peg$c18 = "select";
  var peg$c19 = "from";
  var peg$c20 = "where";
  var peg$c21 = "having";
  var peg$c22 = "or";
  var peg$c23 = "and";
  var peg$c24 = "as";
  var peg$c25 = "group by";
  var peg$c26 = "order by";
  var peg$c27 = "asc";
  var peg$c28 = "desc";
  var peg$c29 = "limit";
  var peg$c30 = "offset";
  var peg$c31 = "join";
  var peg$c32 = "on";
  var peg$c33 = "*";
  var peg$c34 = "between";
  var peg$c35 = "AND";
  var peg$c36 = "in";
  var peg$c37 = "min";
  var peg$c38 = "max";
  var peg$c39 = "avg";
  var peg$c40 = "count";
  var peg$c41 = "sum";
  var peg$c42 = "length";
  var peg$c43 = "upper";
  var peg$c44 = "lower";
  var peg$c45 = "substr";
  var peg$c46 = "ltrim";
  var peg$c47 = "rtrim";
  var peg$c48 = "trim";
  var peg$c49 = "replace";
  var peg$c50 = "instr";
  var peg$c51 = "integer";
  var peg$c52 = "text";
  var peg$c53 = "real";
  var peg$c54 = "blob";
  var peg$c55 = "unique";
  var peg$c56 = "primary key";
  var peg$c57 = "not null";
  var peg$c58 = "<>";
  var peg$c59 = "<=";
  var peg$c60 = ">=";
  var peg$c61 = "<";
  var peg$c62 = ">";
  var peg$c63 = "=";
  var peg$c64 = "like";
  var peg$c65 = "\n";
  var peg$c66 = " ";

  var peg$r0 = /^[a-z0-9]/i;
  var peg$r1 = /^[a-z\xE4\xC4\xFC\xDC\xF6\xD6\xDF0-9_%*]/i;
  var peg$r2 = /^[a-z\xE4\xC4\xFC\xDC\xF6\xD6\xDF0-9_.%*]/i;
  var peg$r3 = /^['']/;
  var peg$r4 = /^[\-a-z0-9_%*\xE4\xC4\xFC\xDC\xF6\xD6\xDF ]/i;

  var peg$e0 = peg$literalExpectation(")", false);
  var peg$e1 = peg$literalExpectation("INSERT INTO", true);
  var peg$e2 = peg$literalExpectation("(", false);
  var peg$e3 = peg$literalExpectation("VALUES", true);
  var peg$e4 = peg$literalExpectation("UPDATE", true);
  var peg$e5 = peg$literalExpectation("SET", true);
  var peg$e6 = peg$literalExpectation(",", false);
  var peg$e7 = peg$literalExpectation("DROP TABLE", true);
  var peg$e8 = peg$literalExpectation("ALTER TABLE", true);
  var peg$e9 = peg$literalExpectation("DROP COLUMN", true);
  var peg$e10 = peg$literalExpectation("RENAME TO", true);
  var peg$e11 = peg$literalExpectation("RENAME", true);
  var peg$e12 = peg$literalExpectation("TO", true);
  var peg$e13 = peg$literalExpectation("ADD COLUMN", true);
  var peg$e14 = peg$literalExpectation("DELETE FROM", true);
  var peg$e15 = peg$literalExpectation("CREATE TABLE", true);
  var peg$e16 = peg$literalExpectation("FOREIGN KEY", true);
  var peg$e17 = peg$literalExpectation("REFERENCES", true);
  var peg$e18 = peg$literalExpectation("SELECT", true);
  var peg$e19 = peg$literalExpectation("FROM", true);
  var peg$e20 = peg$literalExpectation("WHERE", true);
  var peg$e21 = peg$literalExpectation("HAVING", true);
  var peg$e22 = peg$literalExpectation("OR", true);
  var peg$e23 = peg$literalExpectation("AND", true);
  var peg$e24 = peg$literalExpectation("AS", true);
  var peg$e25 = peg$classExpectation([["a", "z"], ["0", "9"]], false, true);
  var peg$e26 = peg$literalExpectation("GROUP BY", true);
  var peg$e27 = peg$literalExpectation("ORDER BY", true);
  var peg$e28 = peg$literalExpectation("ASC", true);
  var peg$e29 = peg$literalExpectation("DESC", true);
  var peg$e30 = peg$literalExpectation("LIMIT", true);
  var peg$e31 = peg$literalExpectation("OFFSET", true);
  var peg$e32 = peg$literalExpectation("JOIN", true);
  var peg$e33 = peg$literalExpectation("ON", true);
  var peg$e34 = peg$otherExpectation("select valid SelectField");
  var peg$e35 = peg$literalExpectation("*", false);
  var peg$e36 = peg$literalExpectation("BETWEEN", true);
  var peg$e37 = peg$literalExpectation("AND", false);
  var peg$e38 = peg$literalExpectation("IN", true);
  var peg$e39 = peg$literalExpectation("MIN", true);
  var peg$e40 = peg$literalExpectation("MAX", true);
  var peg$e41 = peg$literalExpectation("AVG", true);
  var peg$e42 = peg$literalExpectation("COUNT", true);
  var peg$e43 = peg$literalExpectation("SUM", true);
  var peg$e44 = peg$literalExpectation("LENGTH", true);
  var peg$e45 = peg$literalExpectation("UPPER", true);
  var peg$e46 = peg$literalExpectation("LOWER", true);
  var peg$e47 = peg$literalExpectation("SUBSTR", true);
  var peg$e48 = peg$literalExpectation("LTRIM", true);
  var peg$e49 = peg$literalExpectation("RTRIM", true);
  var peg$e50 = peg$literalExpectation("TRIM", true);
  var peg$e51 = peg$literalExpectation("REPLACE", true);
  var peg$e52 = peg$literalExpectation("INSTR", true);
  var peg$e53 = peg$literalExpectation("INTEGER", true);
  var peg$e54 = peg$literalExpectation("TEXT", true);
  var peg$e55 = peg$literalExpectation("REAL", true);
  var peg$e56 = peg$literalExpectation("BLOB", true);
  var peg$e57 = peg$literalExpectation("UNIQUE", true);
  var peg$e58 = peg$literalExpectation("PRIMARY KEY", true);
  var peg$e59 = peg$literalExpectation("NOT NULL", true);
  var peg$e60 = peg$literalExpectation("<>", false);
  var peg$e61 = peg$literalExpectation("<=", false);
  var peg$e62 = peg$literalExpectation(">=", false);
  var peg$e63 = peg$literalExpectation("<", false);
  var peg$e64 = peg$literalExpectation(">", false);
  var peg$e65 = peg$literalExpectation("=", false);
  var peg$e66 = peg$literalExpectation("LIKE", true);
  var peg$e67 = peg$classExpectation([["a", "z"], "\xE4", "\xC4", "\xFC", "\xDC", "\xF6", "\xD6", "\xDF", ["0", "9"], "_", "%", "*"], false, true);
  var peg$e68 = peg$classExpectation([["a", "z"], "\xE4", "\xC4", "\xFC", "\xDC", "\xF6", "\xD6", "\xDF", ["0", "9"], "_", ".", "%", "*"], false, true);
  var peg$e69 = peg$otherExpectation("Input");
  var peg$e70 = peg$classExpectation(["'", "'"], false, false);
  var peg$e71 = peg$classExpectation(["-", ["a", "z"], ["0", "9"], "_", "%", "*", "\xE4", "\xC4", "\xFC", "\xDC", "\xF6", "\xD6", "\xDF", " "], false, true);
  var peg$e72 = peg$otherExpectation("newline");
  var peg$e73 = peg$literalExpectation("\n", false);
  var peg$e74 = peg$otherExpectation("whitespace");
  var peg$e75 = peg$literalExpectation(" ", false);

  var peg$f0 = function(alter, drop, renameTable, renameColumn, addColumn) {
    let resultArray = [];
    resultArray = resultArray.concat(alter);
    if(drop != null)resultArray = resultArray.concat(drop);
    if(renameTable != null)resultArray = resultArray.concat(renameTable);
    if(renameColumn != null)resultArray = resultArray.concat(renameColumn);
    if(addColumn != null)resultArray = resultArray.concat(addColumn);
    return resultArray;
    };
  var peg$f1 = function(update, where, andOr) {
    let resultArray = [];
    resultArray = resultArray.concat(update);
    where.forEach((where) =>{
      resultArray = resultArray.concat(where);
    });
    andOr.forEach((andOr) =>{
      resultArray = resultArray.concat(andOr);
    });
    return resultArray;
    };
  var peg$f2 = function(del, where, andOr) {
    let resultArray = [];
    resultArray = resultArray.concat(del);
    where.forEach((where) =>{
      resultArray = resultArray.concat(where);
    });
    andOr.forEach((andOr) =>{
      resultArray = resultArray.concat(andOr);
    });
    return resultArray;
    };
  var peg$f3 = function(drop) {
    let resultArray = [];
    resultArray = resultArray.concat(drop);
    return resultArray;
    };
  var peg$f4 = function(insert) {
    let resultArray = [];
    resultArray = resultArray.concat(insert);
    return resultArray;
    };
  var peg$f5 = function(create, createColumn, craeateForeignKey) {
    let resultArray = [];

    resultArray = resultArray.concat(create);

    createColumn.forEach((createColumn) =>{
      resultArray = resultArray.concat(createColumn);
    });
    craeateForeignKey.forEach((craeateForeignKey) =>{
      resultArray = resultArray.concat(craeateForeignKey);
    });
    return resultArray;
    };
  var peg$f6 = function(select, join, where, andOr, groupBy, having, andOr2, orderBy, limit, offset) { 
    let resultArray = [];
    
    resultArray = resultArray.concat(select);
    
    join.forEach((join) =>{
      resultArray = resultArray.concat(join);
    });
    where.forEach((where) =>{
      resultArray = resultArray.concat(where);
    });
    andOr.forEach((andOr) =>{
      resultArray = resultArray.concat(andOr);
    });
    orderBy.forEach((orderBy) =>{
      resultArray = resultArray.concat(orderBy);
    });
    groupBy.forEach((groupBy) =>{
      resultArray = resultArray.concat(groupBy);
    });
    having.forEach((having) =>{
      resultArray = resultArray.concat(having);
    });   
    andOr2.forEach((andOr2) =>{
      resultArray = resultArray.concat(andOr2);
    });
    limit.forEach((limit) =>{
      resultArray = resultArray.concat(limit);
    });
     offset.forEach((offset) =>{
      resultArray = resultArray.concat(offset);
    });
    return resultArray;
  };
  var peg$f7 = function(x, x1, x2, x3, x4) {     
    return {    
      type: "INSERT INTO",
      selectField1: x,
      mainTable: x,
      selectFields1: [x1].concat(x2),
      selectFields2: [x3].concat(x4)
      };
  };
  var peg$f8 = function(x, x2) {
     let updates = []
     x2.forEach(element =>{
     	updates = updates.concat(element[0])
     });
     
    return {    
      type: "UPDATE",
      selectField1: x,
      mainTable: x,
      updates: updates
      };
  };
  var peg$f9 = function(x) {     
    return {    
      type: "DROP TABLE",
      selectField: x,      
      mainTable: x
      };
  };
  var peg$f10 = function(x) {     
    return {    
      type: "ALTER TABLE",
      selectField: x,      
      mainTable: x
      };
  };
  var peg$f11 = function(x) {     
    return {    
      type: "ALTER DROP COLUMN",
      selectField: x,      
      };
  };
  var peg$f12 = function(x) {     
    return {    
      type: "ALTER RENAME TABLE",
      selectField: x,      
      };
 };
  var peg$f13 = function(x, x1) {     
    return {    
      type: "ALTER RENAME COLUMN",
      selectField1: x,
      selectField2: x1, 
      };
  };
  var peg$f14 = function(x, x1) {     
    return {    
      type: "ALTER ADD COLUMN",
      selectField: x,
      datatype: x1
      };
 };
  var peg$f15 = function(x) {     
    return {    
      type: "DELETE FROM",
      selectField: x,      
      mainTable: x
      };
  };
  var peg$f16 = function(x) {     
    return {    
      type: "CREATE TABLE",
      selectField: x,      
      mainTable: x
      };
  };
  var peg$f17 = function(x, x1, x2) {
    return {
    type: "CREATE COLUMN",
      selectField: x,
      datatype: x1,
      constraint: x2
    };
  };
  var peg$f18 = function(x, x1, x2) {
     x2.ownTable = x1.value;
    return {    
      type: "CREATE FOREIGN KEY",
      selectField1: x,
      selectField2: x1, 
      selectField3: x2 
      };
  };
  var peg$f19 = function(x, xs, from) {     
    return {    
      type: "SELECT",
      selectFields: [x].concat(xs),      
      from: from,
      mainTable: from
      };
  };
  var peg$f20 = function(x1, x2, x3) {
    x1 = checkBrackets(x1);
    x3 = checkBrackets(x3);
    return {
    type: "WHERE",
      leftBracket: x1,
      rightBracket: x3,
      conditions: [x2]
    };
  };
  var peg$f21 = function(x1, x2, x3) {
    x1 = checkBrackets(x1);
    x3 = checkBrackets(x3);
    return {
    type: "HAVING",
      leftBracket: x1,
      rightBracket: x3,
      conditions: [x2]
    };
  };
  var peg$f22 = function(x1, x2, x3) {
    x1 = checkBrackets(x1);
    x3 = checkBrackets(x3);
    return {
    type: "OR",
      leftBracket: x1,
      rightBracket: x3,
      conditions: [x2]
    };
  };
  var peg$f23 = function(x1, x2, x3) {
    x1 = checkBrackets(x1);
    x3 = checkBrackets(x3);
    return {
    type: "AND",
      leftBracket: x1,
      rightBracket: x3,
      conditions: [x2]
    };
  };
  var peg$f24 = function(x1, x2) {
    return {
    type: "AS",  
      selectField1: x1,    
      selectField2: x2
    };
  };
  var peg$f25 = function(x1, x2) {
    return {
    type: "GROUP BY",      
      selectFields: [x1].concat(x2)
    };
  };
  var peg$f26 = function(x1, x2) {
    return {
    type: "ORDER BY",      
      selectFields: [x1].concat(x2)
    };
  };
  var peg$f27 = function(x1) {
    return {
    type: "ASC",
    selectField: x1
    };
  };
  var peg$f28 = function(x1) {
    return {
    type: "DESC",
    selectField: x1
    };
  };
  var peg$f29 = function(x1) {
    return {
    type: "LIMIT",      
      selectField: x1
    };
  };
  var peg$f30 = function(x1) {
    return {
    type: "OFFSET",      
      selectField: x1
    };
  };
  var peg$f31 = function(x1, x2) {
    return {
    type: "AGGREGATE",
     aggregate: x1,
      selectField: x2
    };
  };
  var peg$f32 = function(x1, x2, x3) {
    return {
    type: "STRING_FUNCTION",
      string_function: x1,
      selectFields: [x2].concat(x3)
    };
  };
  var peg$f33 = function(x1, x11, x2, x21, x3) {
    if(x11 != null) x1 = [x1].concat(x11[1]); // [0] = undefined, [1] = Identifier
    let conditions = {
    left: x2,
    op: x21,
    right: x3
    
    }
    return {   
    type: "JOIN",
    table: x1, 
    conditions: [conditions]
          };
  };
  var peg$f34 = function(s) {
	return s;
};
  var peg$f35 = function(left, op, right) {
    return {
      left: left,
      op: op,
      right: right
    };
  };
  var peg$f36 = function(left, op, rightFrom, rightTo) {
    return {
      left: left,
      op: op,
      rightFrom: rightFrom,
      rightTo: rightTo
    };
  };
  var peg$f37 = function(left, op, right, rightN) {   
    return {
      left: left,
      op: op,
      right:[right].concat(rightN)
    };
  };
  var peg$f38 = function() { return "<>"; };
  var peg$f39 = function() { return "<="; };
  var peg$f40 = function() { return ">="; };
  var peg$f41 = function() { return "<"; };
  var peg$f42 = function() { return ">"; };
  var peg$f43 = function() { return "="; };
  var peg$f44 = function() { return "LIKE"; };
  var peg$f45 = function(s) {
	return s;
};
  var peg$f46 = function(x, xs) {
    let tempType = ""    
    if(isNaN(text(x.concat(xs)))) tempType = "COLUMN"
    else tempType = "INPUT"
    return {
    type:tempType,
    value:text(x.concat(xs))
    }
};
  var peg$f47 = function(x) {
    return {
    type:"INPUT",
    value:text(x).replaceAll("'","")
    }
};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0;

    s0 = peg$parseStartSelect();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStartCreate();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStartInsert();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStartUpdate();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStartDelete();
            if (s0 === peg$FAILED) {
              s0 = peg$parseStartDrop();
              if (s0 === peg$FAILED) {
                s0 = peg$parseStartAlter();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseStartAlter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAlterStmt();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAlterDropStmt();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseAlterRenameTableStmt();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseAlterRenameColumnStmt();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseAlterAddColumnStmt();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f0(s1, s2, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartUpdate() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseUpdateStmt();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWhereStmt();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWhereStmt();
      }
      s3 = [];
      s4 = peg$parseAndOrStmt();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseAndOrStmt();
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartDelete() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDeleteStmt();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWhereStmt();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWhereStmt();
      }
      s3 = [];
      s4 = peg$parseAndOrStmt();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseAndOrStmt();
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartDrop() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDropStmt();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStartInsert() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseInsertStmt();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStartCreate() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCreateStmt();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseCreateColumnStmt();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseCreateColumnStmt();
      }
      s3 = [];
      s4 = peg$parseCreateForeignKeyStmt();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseCreateForeignKeyStmt();
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartSelect() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseSelectStmt();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseJoinStmt();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseJoinStmt();
      }
      s3 = [];
      s4 = peg$parseWhereStmt();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseWhereStmt();
      }
      s4 = [];
      s5 = peg$parseAndOrStmt();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseAndOrStmt();
      }
      s5 = [];
      s6 = peg$parseGroupByStmt();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseGroupByStmt();
      }
      s6 = [];
      s7 = peg$parseHavingStmt();
      while (s7 !== peg$FAILED) {
        s6.push(s7);
        s7 = peg$parseHavingStmt();
      }
      s7 = [];
      s8 = peg$parseAndOrStmt();
      while (s8 !== peg$FAILED) {
        s7.push(s8);
        s8 = peg$parseAndOrStmt();
      }
      s8 = [];
      s9 = peg$parseOrderByStmt();
      while (s9 !== peg$FAILED) {
        s8.push(s9);
        s9 = peg$parseOrderByStmt();
      }
      s9 = [];
      s10 = peg$parseLimitStmt();
      while (s10 !== peg$FAILED) {
        s9.push(s10);
        s10 = peg$parseLimitStmt();
      }
      s10 = [];
      s11 = peg$parseOffsetStmt();
      while (s11 !== peg$FAILED) {
        s10.push(s11);
        s11 = peg$parseOffsetStmt();
      }
      peg$savedPos = s0;
      s0 = peg$f6(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAndOrStmt() {
    var s0;

    s0 = peg$parseOrStmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAndStmt();
    }

    return s0;
  }

  function peg$parseInsertStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c1) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseSelectField();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseSelectFieldRest();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseSelectFieldRest();
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = input.substr(peg$currPos, 6);
              if (s13.toLowerCase() === peg$c3) {
                peg$currPos += 6;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s15 = peg$c2;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
                if (s15 !== peg$FAILED) {
                  s16 = peg$parse_();
                  s17 = peg$parseSelectField();
                  if (s17 !== peg$FAILED) {
                    s18 = [];
                    s19 = peg$parseSelectFieldRest();
                    while (s19 !== peg$FAILED) {
                      s18.push(s19);
                      s19 = peg$parseSelectFieldRest();
                    }
                    s19 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s20 = peg$c0;
                      peg$currPos++;
                    } else {
                      s20 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s20 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f7(s4, s8, s9, s17, s18);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUpdateStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c4) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = input.substr(peg$currPos, 3);
        if (s6.toLowerCase() === peg$c5) {
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$parseLogicExpr();
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s12 = peg$c6;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s10 = [s10, s11, s12];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$parseLogicExpr();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s12 = peg$c6;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s10 = [s10, s11, s12];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f8(s4, s8);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDropStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 10);
    if (s2.toLowerCase() === peg$c7) {
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c8) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterDropStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c9) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterRenameTableStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 9);
    if (s2.toLowerCase() === peg$c10) {
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterRenameColumnStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c11) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c12) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSelectField();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = input.substr(peg$currPos, 2);
          if (s7.toLowerCase() === peg$c12) {
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSelectField();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f13(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlterAddColumnStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 10);
    if (s2.toLowerCase() === peg$c13) {
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseDatatypeTokens();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeleteStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c14) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCreateStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 12);
    if (s2.toLowerCase() === peg$c15) {
      peg$currPos += 12;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCreateColumnStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSelectField();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseDatatypeTokens();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseConstraintTokens();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c6;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f17(s2, s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCreateForeignKeyStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 11);
    if (s2.toLowerCase() === peg$c16) {
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSelectField();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c0;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = input.substr(peg$currPos, 10);
            if (s10.toLowerCase() === peg$c17) {
              peg$currPos += 10;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseSelectField();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                  s14 = peg$c2;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_();
                  s16 = peg$parseSelectField();
                  if (s16 !== peg$FAILED) {
                    s17 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s18 = peg$c0;
                      peg$currPos++;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s20 = peg$c6;
                        peg$currPos++;
                      } else {
                        s20 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e6); }
                      }
                      if (s20 === peg$FAILED) {
                        s20 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f18(s6, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c18) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseSelectFieldRest();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseSelectFieldRest();
        }
        s6 = peg$parse_();
        s7 = input.substr(peg$currPos, 4);
        if (s7.toLowerCase() === peg$c19) {
          peg$currPos += 4;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseSelectField();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s4, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhereStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c20) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseLogicExprIn();
      if (s6 === peg$FAILED) {
        s6 = peg$parseLogicExprBetween();
        if (s6 === peg$FAILED) {
          s6 = peg$parseLogicExpr();
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c0;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f20(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHavingStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c21) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseLogicExprIn();
      if (s6 === peg$FAILED) {
        s6 = peg$parseLogicExprBetween();
        if (s6 === peg$FAILED) {
          s6 = peg$parseLogicExpr();
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c0;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f21(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c22) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseLogicExprIn();
      if (s6 === peg$FAILED) {
        s6 = peg$parseLogicExprBetween();
        if (s6 === peg$FAILED) {
          s6 = peg$parseLogicExpr();
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c0;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f22(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAndStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c23) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseLogicExprIn();
      if (s6 === peg$FAILED) {
        s6 = peg$parseLogicExprBetween();
        if (s6 === peg$FAILED) {
          s6 = peg$parseLogicExpr();
        }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c0;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f23(s4, s6, s8);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAsStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAggregateStmt();
    if (s2 === peg$FAILED) {
      s2 = peg$parseStringFunctionStmt();
      if (s2 === peg$FAILED) {
        s2 = peg$parseIdentifier();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c24) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = input.charAt(peg$currPos);
        if (peg$r0.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSelectField();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f24(s2, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGroupByStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 8);
    if (s2.toLowerCase() === peg$c25) {
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseSelectFieldRest();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseSelectFieldRest();
        }
        peg$savedPos = s0;
        s0 = peg$f25(s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrderByStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 8);
    if (s2.toLowerCase() === peg$c26) {
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseSelectFieldRest();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseSelectFieldRest();
        }
        peg$savedPos = s0;
        s0 = peg$f26(s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAscStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAggregateStmt();
    if (s2 === peg$FAILED) {
      s2 = peg$parseStringFunctionStmt();
      if (s2 === peg$FAILED) {
        s2 = peg$parseIdentifier();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.substr(peg$currPos, 3);
      if (s4.toLowerCase() === peg$c27) {
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = input.charAt(peg$currPos);
        if (peg$r0.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDescStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAggregateStmt();
    if (s2 === peg$FAILED) {
      s2 = peg$parseStringFunctionStmt();
      if (s2 === peg$FAILED) {
        s2 = peg$parseIdentifier();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.substr(peg$currPos, 4);
      if (s4.toLowerCase() === peg$c28) {
        peg$currPos += 4;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = input.charAt(peg$currPos);
        if (peg$r0.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLimitStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c29) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOffsetStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c30) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAggregateStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAggregateTokens();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSelectField();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c0;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f31(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringFunctionStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseStringFunctionTokens();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSelectField();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseSelectFieldRest();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseSelectFieldRest();
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c0;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f32(s2, s6, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJoinStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c31) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$currPos;
        s7 = peg$currPos;
        peg$silentFails++;
        s8 = input.substr(peg$currPos, 2);
        if (s8.toLowerCase() === peg$c32) {
          peg$currPos += 2;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        peg$silentFails--;
        if (s8 === peg$FAILED) {
          s7 = undefined;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseSelectField();
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = input.substr(peg$currPos, 2);
        if (s8.toLowerCase() === peg$c32) {
          peg$currPos += 2;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseSelectField();
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseOperator();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              s14 = peg$parseSelectField();
              if (s14 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f33(s4, s6, s10, s12, s14);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectField() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseAscStmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDescStmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAsStmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAggregateStmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringFunctionStmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIdentifier();
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s0 = peg$c33;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e35); }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseSelectFieldRest() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSelectField();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f34(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSelectField();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseOperator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSelectField();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f35(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicExprBetween() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSelectField();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.substr(peg$currPos, 7);
      if (s4.toLowerCase() === peg$c34) {
        peg$currPos += 7;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseSelectField();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.substr(peg$currPos, 3) === peg$c35) {
            s8 = peg$c35;
            peg$currPos += 3;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseSelectField();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f36(s2, s4, s6, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicExprIn() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSelectField();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.substr(peg$currPos, 2);
      if (s4.toLowerCase() === peg$c36) {
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseSelectField();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parseSelectFieldRest();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseSelectFieldRest();
            }
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f37(s2, s4, s8, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAggregateTokens() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c37) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 3);
      if (s0.toLowerCase() === peg$c38) {
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c39) {
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 5);
          if (s0.toLowerCase() === peg$c40) {
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 3);
            if (s0.toLowerCase() === peg$c41) {
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e43); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseStringFunctionTokens() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c42) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 5);
      if (s0.toLowerCase() === peg$c43) {
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 5);
        if (s0.toLowerCase() === peg$c44) {
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 6);
          if (s0.toLowerCase() === peg$c45) {
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 5);
            if (s0.toLowerCase() === peg$c46) {
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e48); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 5);
              if (s0.toLowerCase() === peg$c47) {
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e49); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 4);
                if (s0.toLowerCase() === peg$c48) {
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e50); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 7);
                  if (s0.toLowerCase() === peg$c49) {
                    peg$currPos += 7;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e51); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = input.substr(peg$currPos, 5);
                    if (s0.toLowerCase() === peg$c50) {
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e52); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDatatypeTokens() {
    var s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c51) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 4);
      if (s0.toLowerCase() === peg$c52) {
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 4);
        if (s0.toLowerCase() === peg$c53) {
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 4);
          if (s0.toLowerCase() === peg$c54) {
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseConstraintTokens() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c55) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 11);
      if (s0.toLowerCase() === peg$c56) {
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 8);
        if (s0.toLowerCase() === peg$c57) {
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
      }
    }

    return s0;
  }

  function peg$parseOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f39();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c60) {
          s1 = peg$c60;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f40();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s1 = peg$c61;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f41();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c62;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f42();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 61) {
                s1 = peg$c63;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e65); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f43();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c64) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f44();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0;

    s0 = peg$parseInput();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTableColumn();
    }

    return s0;
  }

  function peg$parseIdentifierRest() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTableColumn() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r1.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInput() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
      }
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f47(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseNewLine();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhiteSpace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseNewLine();
      }
    }

    return s0;
  }

  function peg$parseNewLine() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c65;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseWhiteSpace() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c66;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }


	//functions:
  	function checkBrackets(bracket){
  		if(bracket == "(" || bracket == ")") return true;
        else return false;
	}

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["Start"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
